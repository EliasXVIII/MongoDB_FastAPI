Rutas de la API
Obtener Todos los Usuarios
python
Copiar código
@router.get("/", response_model=list[User])
async def users():
    return users_schema(users_collection.find())
@router.get("/"): Define una ruta GET en /userdb/.
response_model=list[User]: Especifica que la respuesta será una lista de objetos User.
users_collection.find(): Recupera todos los documentos en la colección users.
users_schema: Convierte los documentos a una lista de modelos User.
Obtener un Usuario por ID
python
Copiar código
@router.get("/{id}")
async def user(id: str):
    return search_user("_id", ObjectId(id))
@router.get("/{id}"): Define una ruta GET en /userdb/{id}.
id: El parámetro id es un string que representa el ID del usuario.
search_user("_id", ObjectId(id)): Busca un usuario por su _id.
Crear un Usuario
python
Copiar código
@router.post("/", response_model=User, status_code=status.HTTP_201_CREATED)
async def user(user: User):
    if type(search_user("email", user.email)) == User:
        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail="User already exists")
    user_dict = dict(user) 
    del user_dict["id"]
    id = users_collection.insert_one(user_dict).inserted_id 
    new_user = user_schema(users_collection.find_one({"_id": id}))  
    return User(**new_user)
@router.post("/"): Define una ruta POST en /userdb/.
response_model=User: Especifica que la respuesta será un objeto User.
status_code=status.HTTP_201_CREATED: Establece el código de estado HTTP 201 (Creado).
Verifica si ya existe un usuario con el mismo email.
Inserta el nuevo usuario en la base de datos y devuelve el usuario creado.
Actualizar un Usuario
python
Copiar código
@router.put("/", response_model=User)
async def user(user: User):
    user_dict = dict(user)
    del user_dict["id"]
    try:
        users_collection.find_one_and_replace({"_id": ObjectId(user.id)}, user_dict)
    except:
        return {"error":"no se ha actualizado el usuario"}    
    return search_user("_id", ObjectId(user.id))
@router.put("/"): Define una ruta PUT en /userdb/.
response_model=User: Especifica que la respuesta será un objeto User.
Actualiza el usuario existente en la base de datos.
Eliminar un Usuario
python
Copiar código
@router.delete("/{id}", status_code=status.HTTP_204_NO_CONTENT)
async def user(id: str):
    found = users_collection.find_one_and_delete({"_id": ObjectId(id)})
    if not found:
        return {"error": "No se elimina el usuario"}
@router.delete("/{id}"): Define una ruta DELETE en /userdb/{id}.
status_code=status.HTTP_204_NO_CONTENT: Establece el código de estado HTTP 204 (Sin Contenido).
Elimina el usuario con el ID especificado.
Función de Búsqueda de Usuario
python
Copiar código
def search_user(field: str, key):
    try:
       user = users_collection.find_one({field: key})
       return User(**user_schema(user))
    except: 
        return {"error": "User not found this is empty"}
search_user(field: str, key): Busca un usuario en la colección users usando un campo específico.
field: El campo en el que buscar (por ejemplo, _id).
key: El valor del campo a buscar.
Devuelve el usuario encontrado o un error si no se encuentra.
Notas Finales
Asegúrate de tener configurado correctamente db_client en db.client.
Los esquemas user_schema y users_schema deben manejar la conversión entre documentos MongoDB y objetos User.
Maneja excepciones y errores de manera adecuada para asegurar una API robusta y confiable.